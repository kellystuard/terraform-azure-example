import "strings"
import "tfplan"

RDP_PORT = "3389"

range_includes_RDP = func(port_range) {
  split_range = strings.split(port_range, "-")
  return port_range is RDP_PORT or
    split_range contains "*" or
    (split_range[0] <= RDP_PORT and split_range[1] >= RDP_PORT)
}

no_network_security_rules_rdp_port = rule {
  not any tfplan.resources.azurerm_network_security_rule else [] as _, security_rules {
    any security_rule else [] as _, security_rule {
      strings.to_upper(security_rule.applied.access) is "ALLOW" and
      (any security_rule.applied.destination_port_ranges else [] as _, port_range {
        range_includes_RDP(port_range)
      } or
      range_includes_RDP(security_rule.applied.destination_port_range))
    }
  }
}
no_network_security_groups_rdp_port = rule {
  not any tfplan.resources.azurerm_network_security_group else [] as _, security_groups {
    any security_groups else [] as _, security_group {
      any security_group.applied.security_rule else [] as _, security_rule {
        strings.to_upper(security_rule.access) is "ALLOW" and
        (any security_rule.destination_port_ranges else [] as _, port_range {
          range_includes_RDP(port_range)
        } or
        range_includes_RDP(security_rule.destination_port_range))
      }
    }
  }
}

main = rule {
  no_network_security_rules_rdp_port and
  no_network_security_groups_rdp_port
}
